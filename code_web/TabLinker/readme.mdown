<img src='https://github.com/dreamgirl314/Trust_code/tree/master/code_web/TabLinker/img/Accurator.png'/>

# Accurator Trust
**Authors**: [Davide Ceolin](https://github.com/davideceolin), [Archana Nottamkandath](http://github.com/dreamgirl314), [Albert Meroño-Peñuela](https://github.com/albertmeronyo)

**Copyright**: VU University Amsterdam


## About Accurator Trust

This software is developed to evaluate the quality of user provided information to the online system [Accurator](http://sealincmedia.wordpress.com/tag/accurator/). This is developed as part of [COMMIT](http://www.commit-nl.nl/)project entitled [SEALINC Media](https://sealincmedia.wordpress.com/). The goal of this software is to semi-automatically predict the quality of information provided by the users on the web. 
Accurator Trust uses TabLinker, which is an experimental software for converting manually annotated Microsoft Excel workbooks to the [RDF Data Cube vocabulary](http://publishing-statistical-data.googlecode.com/svn/trunk/specs/src/main/html/cube.html). It is used in the context of the [Data2Semantics](http://www.data2semantics.org) project to investigate the use of Linked Data for humanities research ([Dutch census data](http://www.volkstellingen.nl) produced by [DANS](http://dans.knaw.nl)).
TabLinker was designed for converting Excel or CSV files to RDF (triplification, RDF-izing) that have a complex layout and cannot be handled by fully automatic csv2rdf scripts.


## Using Accurator Trust

Accurator Trust takes annotated Excel files  and converts them to RDF. This RDF is then passed on to the trust evaluation algorithms as input and the trust values of the annotations are generated as output.

Annotations in the Excel file should be done using the built-in **style** functionality of Excel (you can specify these by hand). TabLinker currently recognises seven styles:

* **TL Title** - The cell containing the title of a sheet
* **TL Data** - A cell that contains data, e.g. a number for the population size 
* **TL ColHeader** - Used for the headers of columns
* **TL RowHeader** - Used for row headers
* **TL HRowHeader** - Hierarchical header, used for multi-column row headers with subsumption/taxonomic relations between the values of the columns
* **TL RowProperty** - Typically used for the header cells directly above RowHeader or HierarchicalRowHeader cells. Cell values are the properties that relate Data cells to RowHeader and HierarchicalRowHeader cells.
* **TL RowLabel** - Used for cells that contain a label for one of the HierarchicalRowHeader cells in the same row.

An eight style, **TL Metadata**, is currently ignored (See #3).

An [example of such an annotated Excel file](http://github.com/Data2Semantics/TabLinker/tree/master/input/BRT_1889_02_T1_marked.xls) is provided in the [input](http://github.com/Data2Semantics/TabLinker/tree/master/input/) directory. There are ways to import the styles defined in that file into your own Excel files.

**Tip:** If your table contains totals for HierarchicalRowHeader cell values, use a non-TabLink style to mark the cells between the level to which the total belongs, and the cell that contains the name of the total. Have a look at the example [annotated Excel file](http://github.com/Data2Semantics/TabLinker/tree/master/input/BRT_1889_02_T1_marked.xls) to see how this is done (up to row 428).

Once you're all set, start the TabLinker by cd-ing to the [src](http://github.com/Data2Semantics/TabLinker/tree/master/src/) folder, and running:

```python tablinker.py```

## Configuration file

Editing the config.ini file can help you to get a more customized RDF output. Options are:

### general
* **format** is the desired RDF serialization format ('n3' by default).

### paths
* **srcMask** is a mask matching the input XLS files. It works as a directory specifier, as well as wildcard specifier to filter only desired files.
* **targetFolder** is the target directory where you want the RDF files to be written to.

### debug
* **verbose** with value 1 (default) enables verbose mode (0 disables it).

### dataCell
* **literalType** is a URI specifying the datatype for the data cells in the spreadsheet (e.g. [http://www.w3.org/2001/XMLSchema#int])
* **propertyName** is the name of data cell property. Leave blank to use default 'hasValue'.
* **labels** are language literals to be added for that property name (if needed).

### annotations
* **enabled** with value 1 (default) generates an additional graph with the annotations (Excel comments) contained in the XLS files (if any) (0 disables it).
* **model** specifies the data model ('oa' by default) for generating the annotations graph.

## Requirements

TabLinker was developed under the following environment:

* Python 2.7
* The xlutils and xlrd packages from <http://www.python-excel.org/>
* RDFLib 4.0.1, from <http://www.rdflib.net>
* NLTK
* PYYAML

## API Documentation

[API documentation](http://github.com/Data2Semantics/TabLinker/tree/master/doc/tablinker.html) (generated using `pydoc`) is available in the [doc](http://github.com/Data2Semantics/TabLinker/tree/master/doc/) folder.
